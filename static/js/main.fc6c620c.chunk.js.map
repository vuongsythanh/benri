{"version":3,"sources":["firebase/firebaseConfig.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","_useState","useState","_useState2","Object","slicedToArray","data","setData","inputText","useRef","fetchData","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","database","ref","child","sent","on","snap","resData","val","stop","apply","this","arguments","useEffect","react_default","createElement","Container","className","Row","Col","Jumbotron","Button","variant","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","text","current","value","newData","filter","item","vn","toLowerCase","includes","setTimeout","Append","Text","id","Table","striped","bordered","hover","responsive","map","key","jp","read","meaning","note","level","rank","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc6c620c.chunk.js","sourcesContent":["import * as firebase from 'firebase';\nconst config = {\n    apiKey: \"AIzaSyDJ13jFF3v2QTVydXZ5vCVy8AsdCdqQwCk\",\n    authDomain: \"benri-2c1bb.firebaseapp.com\",\n    databaseURL: \"https://benri-2c1bb.firebaseio.com\",\n    projectId: \"benri-2c1bb\",\n    storageBucket: \"benri-2c1bb.appspot.com\",\n    messagingSenderId: \"337467238662\",\n    appId: \"1:337467238662:web:2bd727115d6d4b4f\"\n};\nlet firebaseConfig = firebase.initializeApp(config);\nexport default firebaseConfig;","import React, { useState, useEffect, useRef } from 'react';\nimport firebase from './firebase/firebaseConfig';\nimport { Table, Container, Row, Col, Jumbotron, Button, InputGroup, FormControl } from 'react-bootstrap';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const inputText = useRef(null);\n\n  const fetchData = async () => {\n    const result = await firebase.database().ref().child(\"words\");\n    result.on(\"value\", snap => {\n      let resData = snap.val();\n      setData(resData)\n    })\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const onChangeText = () => {\n    let text = inputText.current.value;\n    if(text!==''){\n      let newData = data.filter(item => item.vn.toLowerCase().includes(text));\n      setTimeout(() => {\n        setData(newData);\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        fetchData();\n      }, 1100);\n    }\n  }\n\n  return (\n    <Container className=\"mt-4\">\n      <Row>\n        <Col>\n        <Jumbotron>\n          <h1>Chào bạn!</h1>\n          <p>\n            Nếu bạn đang gặp khó khăn trong việc loay hoay tra nghĩa từ vựng hán việt \n            thì đây là tiện ích bạn cần!\n          </p>\n          <p>\n            <Button variant=\"primary\">Xem về mình</Button>\n          </p>\n        </Jumbotron>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"Nhập từ hán việt...\"\n            aria-label=\"Nhập từ hán việt...\"\n            aria-describedby=\"basic-addon2\"\n            ref={inputText}\n            onChange={onChangeText}\n          />\n          <InputGroup.Append>\n            <InputGroup.Text id=\"basic-addon2\">Tìm kiếm</InputGroup.Text>\n          </InputGroup.Append>\n        </InputGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Table striped bordered hover responsive=\"sm\" variant=\"dark\">\n            <thead>\n              <tr>\n                  <th>Từ vựng</th>\n                  <th>Âm hán việt</th>\n                  <th>Cách đọc</th>\n                  <th>Ý nghĩa</th>\n                  <th>Cách nhớ</th>\n                  <th>Trình độ</th>\n                  <th>Loại từ</th>\n                </tr>\n            </thead>\n            <tbody>\n              {data.map(item => (\n                  <tr key={item.jp}>\n                    <td>{ item.jp }</td>\n                    <td>{ item.vn }</td>\n                    <td>{ item.read }</td>\n                    <td>{ item.meaning }</td>\n                    <td>{ item.note }</td>\n                    <td>{ item.level }</td>\n                    <td>{ item.rank }</td>\n                  </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}